"use strict";(self.webpackChunksailpoint_developer_portal=self.webpackChunksailpoint_developer_portal||[]).push([[98805],{42514:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var n=i(87462),l=(i(67294),i(3905));const a={id:"plugin-java-executors",title:"Java Classes - Executors",pagination_label:"Java Classes - Executors",sidebar_label:"Java Classes - Executors",sidebar_position:8,sidebar_class_name:"plugin_developer_guide_java_executors",keywords:["plugin"],description:"IdentityIQ Plugin Java Class Plugin Executors",slug:"/iiq/plugin-developer-guide/java-classes-executors",tags:["plugin","guide","identityiq"]},o="Java Classes - Plugin Executors",s={unversionedId:"iiq/plugin-developer-guide/chapter-8/plugin-java-executors",id:"iiq/plugin-developer-guide/chapter-8/plugin-java-executors",title:"Java Classes - Executors",description:"IdentityIQ Plugin Java Class Plugin Executors",source:"@site/docs/iiq/plugin-developer-guide/chapter-8/index.md",sourceDirName:"iiq/plugin-developer-guide/chapter-8",slug:"/iiq/plugin-developer-guide/java-classes-executors",permalink:"/docs/iiq/plugin-developer-guide/java-classes-executors",draft:!1,editUrl:"https://github.com/sailpoint-oss/developer-community-site/edit/main/docs/iiq/plugin-developer-guide/chapter-8/index.md",tags:[{label:"plugin",permalink:"/docs/tags/plugin"},{label:"guide",permalink:"/docs/tags/guide"},{label:"identityiq",permalink:"/docs/tags/identityiq"}],version:"current",lastUpdatedBy:"darrell-thobe-sp",lastUpdatedAt:1709674012,formattedLastUpdatedAt:"Mar 5, 2024",sidebarPosition:8,frontMatter:{id:"plugin-java-executors",title:"Java Classes - Executors",pagination_label:"Java Classes - Executors",sidebar_label:"Java Classes - Executors",sidebar_position:8,sidebar_class_name:"plugin_developer_guide_java_executors",keywords:["plugin"],description:"IdentityIQ Plugin Java Class Plugin Executors",slug:"/iiq/plugin-developer-guide/java-classes-executors",tags:["plugin","guide","identityiq"]},sidebar:"iiqSideBar",previous:{title:"Java Classes - Rest Resources",permalink:"/docs/iiq/plugin-developer-guide/java-classes-rest-resources"},next:{title:"Installation",permalink:"/docs/iiq/plugin-developer-guide/installation"}},r={},u=[{value:"Plugin Object Properties",id:"plugin-object-properties",level:2},{value:"Plugin Helper Methods",id:"plugin-helper-methods",level:2},{value:"Implement a plugin service definition",id:"implement-a-plugin-service-definition",level:2},{value:"BasePluginService Class",id:"basepluginservice-class",level:3},{value:"Service Definition",id:"service-definition",level:3},{value:"Implement a plugin task executor",id:"implement-a-plugin-task-executor",level:2},{value:"BasePluginTaskExecutor Class",id:"baseplugintaskexecutor-class",level:3},{value:"TaskDefinition",id:"taskdefinition",level:3},{value:"Implement a policy executor",id:"implement-a-policy-executor",level:2},{value:"BasePluginPolicyExecutor",id:"basepluginpolicyexecutor",level:3},{value:"Policy XML",id:"policy-xml",level:3}],c={toc:u},p="wrapper";function d(e){let{components:t,...i}=e;return(0,l.kt)(p,(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"java-classes---plugin-executors"},"Java Classes - Plugin Executors"),(0,l.kt)("p",null,"The plugin framework allows developers to include custom task implementations or services with their plugin. These items rely on executor classes that contain the business logic for these services. The following executors are currently available for use by developers:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Service Executors"),(0,l.kt)("li",{parentName:"ol"},"Task Executors"),(0,l.kt)("li",{parentName:"ol"},"Policy Executors")),(0,l.kt)("h2",{id:"plugin-object-properties"},"Plugin Object Properties"),(0,l.kt)("p",null,"When you're defining your plugin object, you must provide a list of service executors that will be included. The list will live inside an attributes map under the key serviceExecutors. Here is what such a list would look like: "),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Plugin Helper methods"),(0,l.kt)("li",{parentName:"ol"},"All inherited Service methods"),(0,l.kt)("li",{parentName:"ol"},"BasePluginTaskExecutor"),(0,l.kt)("li",{parentName:"ol"},"Plugin Helper methods"),(0,l.kt)("li",{parentName:"ol"},"All inherited TaskExecutor methods"),(0,l.kt)("li",{parentName:"ol"},"BasePluginPolicyExecutor"),(0,l.kt)("li",{parentName:"ol"},"Plugin Helper methods"),(0,l.kt)("li",{parentName:"ol"},"All inherited PolicyExecutor methods.")),(0,l.kt)("h2",{id:"plugin-helper-methods"},"Plugin Helper Methods"),(0,l.kt)("p",null,"This is the list of methods included with the ",(0,l.kt)("inlineCode",{parentName:"p"},"BasePlugin")," classes:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"getPluginName()")," - returns a string value of the plugin's name. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"getConnection()")," - returns a connection object used to query the database."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"getSettingString(String settingName)")," - returns a string setting value from the Plugin Settings. "),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"getSettingBool( String settingName)")," - returns a boolean value from the Plugin Settings."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"getSettingInt(String settingName)")," - returns a integer value from the Plugin Settings.")),(0,l.kt)("p",null,"You can think of the ",(0,l.kt)("inlineCode",{parentName:"p"},"BasePlugin")," classes as the foundation for the creation of your specific objects. The biggest advantage to using them is the access to the Plugin Helper Methods. You aren't required to use the ",(0,l.kt)("inlineCode",{parentName:"p"},"BasePlugin")," classes for your implementation though - you're welcome to extend directly from the parent class object you want to implement."),(0,l.kt)("h2",{id:"implement-a-plugin-service-definition"},"Implement a plugin service definition"),(0,l.kt)("p",null,"When you're implementing a plugin service you will have to implement two parts. The first is your Service class, which will contain the business logic for what you want the service ot actually do. The second is the service definition XML file that will be loaded into IdentityIQ. You can find examples of both below: "),(0,l.kt)("h3",{id:"basepluginservice-class"},"BasePluginService Class"),(0,l.kt)("p",null,"This is an abstract class that extends the service class and implements the ",(0,l.kt)("inlineCode",{parentName:"p"},"PluginContext")," interface. You can use this class as the foundation for your custom plugin service:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'public class MyPluginService extends BasePluginService {\n    /**\n     * Override the getPluginName method to return our Plugin Name\n     */\n    @Override\n\n    public String getPluginName() {\n        return "MyPlugin";\n    }\n\n    /**\n     * Override the configure method to handle setup of our Service. Here\n       we\'ll use one of the getSetting helper methods to pull values from\n       our plugin settings\n     */\n    @Override\n\n    public void configure(SailPointContext context) throws GeneralException {\n        mySetting = getSettingString("mySetting");\n    }\n    /**\n     * Write our execute method to do some cool stuff\n     */\n    @Override\n\n    public void execute(SailPointContext context) throws GeneralException {\n        doSomethingCool();\n    }\n\n    /**\n     * Our super cool method.\n     *\n     * @param context The context.\n     * @throws GeneralException\n     */\n     public void doSomethingCool(SailPointContext context)\n      {\n        ......insert cool code here .....\n      }\n}\n')),(0,l.kt)("h3",{id:"service-definition"},"Service Definition"),(0,l.kt)("p",null,"The Service Definition must specify a ",(0,l.kt)("inlineCode",{parentName:"p"},"pluginName")," attribute. This tells IdentityIQ to use the plugin class loader for this executor. If the ",(0,l.kt)("inlineCode",{parentName:"p"},"pluginName")," attribute isn't specified, the executor class won't be findable. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-xml"},'<ServiceDefinition name="MyService" executor="com.acme.MyPluginService" interval="60" hostes="global">\n    <Attributes>\n        <Map>\n            <entry key="pluginName value="MyPlugin"/>\n        </Map>\n    </Attributes>\n</ServiceDefinition>\n')),(0,l.kt)("h2",{id:"implement-a-plugin-task-executor"},"Implement a plugin task executor"),(0,l.kt)("p",null,"Similar to the implementation of the service plugin, there are two parts to a task executor implementation. The first part is the task executor task, which handles your task's business logic. The second is your ",(0,l.kt)("inlineCode",{parentName:"p"},"TaskDefinition")," XML object, which gets loaded into IdentityIQ."),(0,l.kt)("h3",{id:"baseplugintaskexecutor-class"},"BasePluginTaskExecutor Class"),(0,l.kt)("p",null,"This is an abstract class that extends the ",(0,l.kt)("inlineCode",{parentName:"p"},"AbstractTaskExecutor")," class and implements the ",(0,l.kt)("inlineCode",{parentName:"p"},"PluginContext")," interface. You can use this class as the foundation for your custom plugin executor task:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'import sailpoint.task.BasePluginTaskExecutor;\n/**\n* Task executor implementation that does really cool tasks\n*\n*\n*/\n\npublic class MyTaskExecutor extends BasePluginTaskExecutor {\n    /**\n     * Returns our plugin Name\n     */\n\n    @Override\n    public String getPluginName() {\n        return "MyPlugin";\n    }\n    /**\n     * Runs our super cool task stuff\n     */\n\n    @Override\n    public void execute(SailPointContext context, TaskSchedule schedule, TaskResult result, Attributes<String, Object> args) throws Exception {\n        /******* Task implementation goes here *****/\n    }\n    /**\n     * {@inheritDoc}\n     */\n\n    @Override\n    public boolean terminate() {\n        return true;\n    }\n\n}\n')),(0,l.kt)("h3",{id:"taskdefinition"},"TaskDefinition"),(0,l.kt)("p",null,"In your ",(0,l.kt)("inlineCode",{parentName:"p"},"TaskDefintion"),", you must include the ",(0,l.kt)("inlineCode",{parentName:"p"},"pluginName")," attribute because this attribute tells IdentityIQ to to use the plugin class loader instead of the default class loader. If the ",(0,l.kt)("inlineCode",{parentName:"p"},"pluginName")," attribute isn't specified, the executor class won't be findable. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-xml"},'<TaskDefinition name="My Task" executor="com.acme.MyTaskExecutor" resultAction="Delete" subType="task_item_type_generic" type="Generic">\n    <Attributes>\n        <Map>\n            <entry key="pluginName" value="MyPlugin" />\n        </Map>\n    </Attributes>\n</TaskDefinition>\n')),(0,l.kt)("h2",{id:"implement-a-policy-executor"},"Implement a policy executor"),(0,l.kt)("p",null,"Similar to the implementation of the service plugin and the task executor plugin, you must implement two parts: an executor class and a ",(0,l.kt)("inlineCode",{parentName:"p"},"Policy")," Xml object. The ",(0,l.kt)("inlineCode",{parentName:"p"},"Policy")," object must contain the ",(0,l.kt)("inlineCode",{parentName:"p"},"pluginName")," attribute:"),(0,l.kt)("h3",{id:"basepluginpolicyexecutor"},"BasePluginPolicyExecutor"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-java"},'/**\n\n* Policy executor implementation that checks to see if it\'s\n* Tuesday.\n*\n*\n*/\n\npublic class MyPolicyExecutor extends BasePluginPolicyExecutor {\n    /**\n     * {@inheritDoc}\n     */\n\n    @Override\n    public String getPluginName() {\n        return "My Plugin";\n    }\n\n \n\n \n\n    /**\n     * {@inheritDoc}\n     **/\n    public List<PolicyViolation> evaluate(SailPointContext context, Policy policy, Identity id) throws GeneralException {\n\n        List<PolicyViolation> violations = new ArrayList<>();\n        if(today.equals("Tuesday"))\n          {\n            violations.add(createViolation(context, policy, id, numActive));\n          }\n        return violations;\n    }\n\n \n\n \n\n    /**\n     * Creates a policy violation for the identity.\n     *\n     * @param context The context.\n     * @param policy The policy.\n     * @param identity The identity.\n     * @param numActive The numer of active todos for the identity.\n     * @return The violation.\n     */\n\n    private PolicyViolation createViolation(SailPointContext context, Policy policy, Identity identity, int numActive) {\n\n        PolicyViolation violation = new PolicyViolation();\n        violation.setStatus(PolicyViolation.Status.Open);\n        violation.setIdentity(identity);\n        violation.setPolicy(policy);\n        violation.setAlertable(true);\n        violation.setOwner(policy.getViolationOwnerForIdentity(context, identity));\n        violation.setConstraintName("No one likes Tuesday\'s");\n        return formatViolation(context, identity, policy, null, violation);\n\n    }\n}\n')),(0,l.kt)("h3",{id:"policy-xml"},"Policy XML"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-xml"},'<Policy name="My Policy" type="Mine" certificationActions="Mitigated,Delegated"\nconfigPage="genericpolicy.xhtml" executor="com.acme.MyPolicyExecutor" state="Active" violationOwnerType="Manager">\n    <Attributes>\n        <Map>\n            <entry key="pluginName" value="MyPlugin" />\n        </Map>\n   </Attributes>\n</Policy>\n')))}d.isMDXComponent=!0}}]);